{
  "name": "Sd threads",
  "tagline": "Sistemas Distribuídos - Lidando com Threads",
  "body": "## Relatório\r\n### Partes Modificadas e Motivações\r\n\r\nO programa principal tem o nome de **thread_integral.c**, os demais são a evolução do mesmo, cada parte indicada por seu próprio cabeçario.\r\n\r\n### Nomeações e Organização\r\n\r\nO struct **Targumentos** foi definido como Limite, com sua respectiva função de criação. Além disso, foram renomeados por todo o código diversos argumentos e variáveis.\r\n\r\nFunções como **AreaTrapezio** e **f(x)** praticamente não foram modificadas, no entanto a de calculo da área foi dividida em duas funções, **CalculaArea** e **ThreadCalculaArea**, a primeira com o efetivo calculo da área e outra que chama esse calculo de área e altera a variável global. \r\n\r\n### Mutex\r\n\r\nQuanto a função **ThreadCalculaArea** é tratada, pois a alteração da variável global envolve mais de uma operação em baixo nível. \r\n\r\nSendo assim, o processo executado por uma thread pode ser interrompido ou modificado pela intervenção de outra, causando assim um resultado de integral inválido.\r\n\r\nEnquanto uma altera o valor da variável global outra pode tentar alterar ao mesmo tempo, assim esse processo é serializado pelo mutex da seguinte forma:\r\n\r\n`//controlando área que pode haver condição de corrida\r\n\r\n    pthread_mutex_lock(&lock);\r\n\r\n    integral += area2; \r\n\r\n    pthread_mutex_unlock(&lock);`\r\n\r\n### Criação de Threads\r\n\r\nA criação de threads é feito de acordo com o número de processadores, esse número é obtido pela chamada de função **get_nprocs()**, que foi válida pela inclusão da biblioteca **<sys/sysinfo.h>**.\r\n\r\nFoi criado um vetor de threads com o tamanho do número de núcleos existentes no computador e foi dado a cada thread um objetivo, uma área limitada para que essa thread pudesse calcular a função **ThreadCalculaArea** e finalmente cada uma dessas threads criadas foi startada.\r\n\r\n### Main\r\n\r\nChama as funções e calcula a área, seguindo esses passos:\r\n\r\n* Verificar-se se houve falhas na inicialização das threads,\r\n* São criadas as threads.\r\n* É efetivamente calculada a área\r\n* As threads são destruídas \r\n* É encerrado o programa.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}